<class>
<keyword> class </keyword>
<identifier> PongGame, defined, kind = class </identifier>
<symbol> { </symbol>
<classVarDec>
<keyword> static </keyword>
<identifier> PongGame, used, kind = class </identifier>
<identifier> instance, defined, kind = STATIC, type = PongGame, idx = 0 </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<identifier> Bat, used, kind = class </identifier>
<identifier> bat, defined, kind = FIELD, type = Bat, idx = 0 </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<identifier> Ball, used, kind = class </identifier>
<identifier> ball, defined, kind = FIELD, type = Ball, idx = 1 </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> wall, defined, kind = FIELD, type = int, idx = 2 </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> boolean </keyword>
<identifier> exit, defined, kind = FIELD, type = boolean, idx = 3 </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> score, defined, kind = FIELD, type = int, idx = 4 </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> lastWall, defined, kind = FIELD, type = int, idx = 5 </identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> batWidth, defined, kind = FIELD, type = int, idx = 6 </identifier>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> constructor </keyword>
<identifier> PongGame, used, kind = class </identifier>
<identifier> new, defined, kind = subroutine, type = PongGame </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> clearScreen, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> batWidth, used, kind = FIELD, type = int, idx = 6 </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 50 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> bat, used, kind = FIELD, type = Bat, idx = 0 </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Bat, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> new, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 230 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 229 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier> batWidth, used, kind = FIELD, type = int, idx = 6 </identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 7 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> ball, used, kind = FIELD, type = Ball, idx = 1 </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Ball, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> new, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 253 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 222 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 511 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 229 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> ball, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> setDestination, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 400 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Screen, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> drawRectangle, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 238 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 511 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 240 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> moveCursor, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 22 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> printString, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> Score: 0 </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> exit, used, kind = FIELD, type = boolean, idx = 3 </identifier>
<symbol> = </symbol>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> score, used, kind = FIELD, type = int, idx = 4 </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> wall, used, kind = FIELD, type = int, idx = 2 </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> lastWall, used, kind = FIELD, type = int, idx = 5 </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose, defined, kind = subroutine, type = void </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> bat, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> dispose, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> ball, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> dispose, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Memory, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> deAlloc, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> newInstance, defined, kind = subroutine, type = void </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> instance, used, kind = STATIC, type = PongGame, idx = 0 </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> PongGame, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> new, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<identifier> PongGame, used, kind = class </identifier>
<identifier> getInstance, defined, kind = subroutine, type = PongGame </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier> instance, used, kind = STATIC, type = PongGame, idx = 0 </identifier>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> run, defined, kind = subroutine, type = void </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> char </keyword>
<identifier> key, defined, kind = VAR, type = char, idx = 0 </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<identifier> exit, used, kind = FIELD, type = boolean, idx = 3 </identifier>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> key, used, kind = VAR, type = char, idx = 0 </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<identifier> exit, used, kind = FIELD, type = boolean, idx = 3 </identifier>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> key, used, kind = VAR, type = char, idx = 0 </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Keyboard, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> keyPressed, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> bat, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> move, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> moveBall, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Sys, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> wait, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 50 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> key, used, kind = VAR, type = char, idx = 0 </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 130 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> bat, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> setDirection, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> key, used, kind = VAR, type = char, idx = 0 </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 132 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> bat, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> setDirection, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> key, used, kind = VAR, type = char, idx = 0 </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 140 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> exit, used, kind = FIELD, type = boolean, idx = 3 </identifier>
<symbol> = </symbol>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> key, used, kind = VAR, type = char, idx = 0 </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<identifier> exit, used, kind = FIELD, type = boolean, idx = 3 </identifier>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> key, used, kind = VAR, type = char, idx = 0 </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Keyboard, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> keyPressed, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> bat, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> move, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> moveBall, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Sys, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> wait, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 50 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> exit, used, kind = FIELD, type = boolean, idx = 3 </identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Output, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> moveCursor, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 27 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> printString, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> Game Over </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> moveBall, defined, kind = subroutine, type = void </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> bouncingDirection, defined, kind = VAR, type = int, idx = 0 </identifier>
<symbol> , </symbol>
<identifier> batLeft, defined, kind = VAR, type = int, idx = 1 </identifier>
<symbol> , </symbol>
<identifier> batRight, defined, kind = VAR, type = int, idx = 2 </identifier>
<symbol> , </symbol>
<identifier> ballLeft, defined, kind = VAR, type = int, idx = 3 </identifier>
<symbol> , </symbol>
<identifier> ballRight, defined, kind = VAR, type = int, idx = 4 </identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> wall, used, kind = FIELD, type = int, idx = 2 </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> ball, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> move, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> wall, used, kind = FIELD, type = int, idx = 2 </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> wall, used, kind = FIELD, type = int, idx = 2 </identifier>
</term>
<symbol> = </symbol>
<term>
<identifier> lastWall, used, kind = FIELD, type = int, idx = 5 </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> lastWall, used, kind = FIELD, type = int, idx = 5 </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> wall, used, kind = FIELD, type = int, idx = 2 </identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> bouncingDirection, used, kind = VAR, type = int, idx = 0 </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> batLeft, used, kind = VAR, type = int, idx = 1 </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> bat, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> getLeft, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> batRight, used, kind = VAR, type = int, idx = 2 </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> bat, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> getRight, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> ballLeft, used, kind = VAR, type = int, idx = 3 </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> ball, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> getLeft, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier> ballRight, used, kind = VAR, type = int, idx = 4 </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> ball, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> getRight, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> wall, used, kind = FIELD, type = int, idx = 2 </identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> exit, used, kind = FIELD, type = boolean, idx = 3 </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> batLeft, used, kind = VAR, type = int, idx = 1 </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<identifier> ballRight, used, kind = VAR, type = int, idx = 4 </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> | </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> batRight, used, kind = VAR, type = int, idx = 2 </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier> ballLeft, used, kind = VAR, type = int, idx = 3 </identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<identifier> exit, used, kind = FIELD, type = boolean, idx = 3 </identifier>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> ballRight, used, kind = VAR, type = int, idx = 4 </identifier>
</term>
<symbol> &lt; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> batLeft, used, kind = VAR, type = int, idx = 1 </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> bouncingDirection, used, kind = VAR, type = int, idx = 0 </identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier> ballLeft, used, kind = VAR, type = int, idx = 3 </identifier>
</term>
<symbol> &gt; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier> batRight, used, kind = VAR, type = int, idx = 2 </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier> bouncingDirection, used, kind = VAR, type = int, idx = 0 </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<letStatement>
<keyword> let </keyword>
<identifier> batWidth, used, kind = FIELD, type = int, idx = 6 </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> batWidth, used, kind = FIELD, type = int, idx = 6 </identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> bat, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> setWidth, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> batWidth, used, kind = FIELD, type = int, idx = 6 </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier> score, used, kind = FIELD, type = int, idx = 4 </identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> score, used, kind = FIELD, type = int, idx = 4 </identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> moveCursor, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<integerConstant> 22 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<integerConstant> 7 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> Output, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> printInt, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> score, used, kind = FIELD, type = int, idx = 4 </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<doStatement>
<keyword> do </keyword>
<identifier> ball, used, kind = class </identifier>
<symbol> . </symbol>
<identifier> bounce, used, kind = subroutine, type =  </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier> bouncingDirection, used, kind = VAR, type = int, idx = 0 </identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
